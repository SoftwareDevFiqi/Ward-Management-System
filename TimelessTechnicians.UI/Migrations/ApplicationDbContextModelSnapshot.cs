// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimelessTechnicians.UI.Data;

#nullable disable

namespace TimelessTechnicians.UI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.AdmitPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmitPatientStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.ToTable("AdmitPatients");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergyId"));

                    b.Property<string>("DeletionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AllergyId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            AllergyId = 1,
                            DeletionStatus = "Active",
                            Description = "Allergy to peanuts and peanut products.",
                            Name = "Peanuts"
                        },
                        new
                        {
                            AllergyId = 2,
                            DeletionStatus = "Active",
                            Description = "Allergy to shellfish including shrimp, crab, and lobster.",
                            Name = "Shellfish"
                        },
                        new
                        {
                            AllergyId = 3,
                            DeletionStatus = "Active",
                            Description = "Allergy to penicillin and related antibiotics.",
                            Name = "Penicillin"
                        },
                        new
                        {
                            AllergyId = 4,
                            DeletionStatus = "Active",
                            Description = "Allergy to eggs and products containing eggs.",
                            Name = "Eggs"
                        },
                        new
                        {
                            AllergyId = 5,
                            DeletionStatus = "Active",
                            Description = "Allergy to cow's milk and dairy products.",
                            Name = "Milk"
                        },
                        new
                        {
                            AllergyId = 6,
                            DeletionStatus = "Active",
                            Description = "Allergy to wheat or wheat-based products.",
                            Name = "Wheat"
                        },
                        new
                        {
                            AllergyId = 7,
                            DeletionStatus = "Active",
                            Description = "Allergy to soybeans and soy-based products.",
                            Name = "Soy"
                        },
                        new
                        {
                            AllergyId = 8,
                            DeletionStatus = "Active",
                            Description = "Allergy to natural rubber latex products.",
                            Name = "Latex"
                        },
                        new
                        {
                            AllergyId = 9,
                            DeletionStatus = "Active",
                            Description = "Allergic reaction to insect stings, such as bees or wasps.",
                            Name = "Insect stings"
                        },
                        new
                        {
                            AllergyId = 10,
                            DeletionStatus = "Active",
                            Description = "Allergy to pollen from trees, grass, or weeds.",
                            Name = "Pollen"
                        },
                        new
                        {
                            AllergyId = 11,
                            DeletionStatus = "Active",
                            Description = "Allergy to mold spores found indoors and outdoors.",
                            Name = "Mold"
                        },
                        new
                        {
                            AllergyId = 12,
                            DeletionStatus = "Active",
                            Description = "Allergy to dander from animals, particularly cats and dogs.",
                            Name = "Animal Dander"
                        },
                        new
                        {
                            AllergyId = 13,
                            DeletionStatus = "Active",
                            Description = "Allergy to dust mites that live in household dust.",
                            Name = "Dust Mites"
                        },
                        new
                        {
                            AllergyId = 14,
                            DeletionStatus = "Active",
                            Description = "Allergy or sensitivity to fragrances found in perfumes, soaps, or detergents.",
                            Name = "Fragrances"
                        },
                        new
                        {
                            AllergyId = 15,
                            DeletionStatus = "Active",
                            Description = "Allergy to nickel found in jewelry, watches, or belt buckles.",
                            Name = "Nickel"
                        },
                        new
                        {
                            AllergyId = 16,
                            DeletionStatus = "Active",
                            Description = "Allergy to citrus fruits such as oranges, lemons, or grapefruits.",
                            Name = "Citrus Fruits"
                        },
                        new
                        {
                            AllergyId = 17,
                            DeletionStatus = "Active",
                            Description = "Allergy to gluten, a protein found in wheat, barley, and rye.",
                            Name = "Gluten"
                        },
                        new
                        {
                            AllergyId = 18,
                            DeletionStatus = "Active",
                            Description = "Allergy to avocados and products containing avocado.",
                            Name = "Avocados"
                        },
                        new
                        {
                            AllergyId = 19,
                            DeletionStatus = "Active",
                            Description = "Allergy to tree nuts such as almonds, walnuts, or cashews.",
                            Name = "Tree Nuts"
                        },
                        new
                        {
                            AllergyId = 20,
                            DeletionStatus = "Active",
                            Description = "Allergy or sensitivity to chocolate and cocoa products.",
                            Name = "Chocolate"
                        },
                        new
                        {
                            AllergyId = 21,
                            DeletionStatus = "Active",
                            Description = "Allergy to corn or corn-based products.",
                            Name = "Corn"
                        },
                        new
                        {
                            AllergyId = 22,
                            DeletionStatus = "Active",
                            Description = "Allergy to bananas and products containing bananas.",
                            Name = "Bananas"
                        },
                        new
                        {
                            AllergyId = 23,
                            DeletionStatus = "Active",
                            Description = "Allergy to garlic and garlic-based products.",
                            Name = "Garlic"
                        },
                        new
                        {
                            AllergyId = 24,
                            DeletionStatus = "Active",
                            Description = "Allergy to tomatoes and products containing tomatoes.",
                            Name = "Tomatoes"
                        },
                        new
                        {
                            AllergyId = 25,
                            DeletionStatus = "Active",
                            Description = "Allergy to apples and products containing apples.",
                            Name = "Apples"
                        },
                        new
                        {
                            AllergyId = 26,
                            DeletionStatus = "Active",
                            Description = "Allergy or sensitivity to artificial sweeteners like aspartame.",
                            Name = "Aspartame"
                        },
                        new
                        {
                            AllergyId = 27,
                            DeletionStatus = "Active",
                            Description = "Allergy to barley and barley-based products.",
                            Name = "Barley"
                        },
                        new
                        {
                            AllergyId = 28,
                            DeletionStatus = "Active",
                            Description = "Allergy to sesame seeds and sesame oil.",
                            Name = "Sesame Seeds"
                        },
                        new
                        {
                            AllergyId = 29,
                            DeletionStatus = "Active",
                            Description = "Allergy to sunflower seeds and sunflower oil.",
                            Name = "Sunflower Seeds"
                        },
                        new
                        {
                            AllergyId = 30,
                            DeletionStatus = "Active",
                            Description = "Allergy to mustard seeds and mustard-based products.",
                            Name = "Mustard"
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsOfServiceAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a22502c6-b742-4592-91b3-c03f85d2b8e1",
                            AccessFailedCount = 0,
                            Address = "123 Admin St, Port Elizabeth",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "779ab212-2857-481d-8d07-c2f779516e60",
                            ConfirmPassword = "admin@123",
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "group4@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Group-4",
                            LastName = "Group-4e",
                            LockoutEnabled = false,
                            Password = "admin@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKzs+4dMCwLgdmHaS5yWh7xTOUvY0OolqrcafM2ARK7GZhpZqgLnFyDTJTEP7F9jlA==",
                            PhoneNumberConfirmed = false,
                            Role = "ADMINISTRATOR",
                            SecurityStamp = "c99c1477-229d-497e-8d67-b799758c6ef8",
                            Status = "Active",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mr",
                            TwoFactorEnabled = false,
                            UserName = "Group-4"
                        },
                        new
                        {
                            Id = "1d04efe8-185c-49e8-a250-6ad3d88388a3",
                            AccessFailedCount = 0,
                            Address = "456 Nurse Ave, North End",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "98c06fab-d053-4987-a8ae-6d0831c18b10",
                            ConfirmPassword = "nurse@123",
                            DateOfBirth = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nurse@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Princess",
                            LastName = "Phiri",
                            LockoutEnabled = false,
                            Password = "nurse@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJd9HD65QoqE19KLcVYxfgwOPzXOsDQAsCl7ytcll8UUezUk8k/Bfkax/s4FlLICkw==",
                            PhoneNumberConfirmed = false,
                            Role = "NURSE",
                            SecurityStamp = "9ab41f87-ab9e-41cc-97ca-86223e7175f9",
                            Status = "Active",
                            Suburb = "NorthEnd",
                            TermsOfServiceAccepted = true,
                            Title = "Mrs",
                            TwoFactorEnabled = false,
                            UserName = "Nurse Princess"
                        },
                        new
                        {
                            Id = "37930bab-a31c-425c-b9a7-f61deb128c00",
                            AccessFailedCount = 0,
                            Address = "456 Nurse Ave, North End",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "26c4c432-092b-4fc7-a515-a9eafa6bcb8b",
                            ConfirmPassword = "123@Gomolemo",
                            DateOfBirth = new DateTime(1985, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gomolemo@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Gomolemo",
                            LastName = "Mogale",
                            LockoutEnabled = false,
                            Password = "123@Gomolemo",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuI8JMDS+1ijmYZH/SjBhdlHGbrk/+1oVOwJe/7qmbz/OP9EByqLwi4qtJ1WiSHMg==",
                            PhoneNumberConfirmed = false,
                            Role = "DOCTOR",
                            SecurityStamp = "ed7ddac8-338b-423e-bdf0-919264c44fe8",
                            Status = "Active",
                            Suburb = "NorthEnd",
                            TermsOfServiceAccepted = true,
                            Title = "Mrs",
                            TwoFactorEnabled = false,
                            UserName = "Gomolemo"
                        },
                        new
                        {
                            Id = "2e26990d-9722-4583-82aa-8976e7b95d18",
                            AccessFailedCount = 0,
                            Address = "321 Pharmacy Ln, SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "ddccd0cf-11a9-4180-95cb-68136038d10f",
                            ConfirmPassword = "script@123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "siba@pharmacy.com",
                            EmailConfirmed = false,
                            FirstName = "Sibabalwe",
                            LastName = "Nzono",
                            LockoutEnabled = false,
                            Password = "script@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGDb3PxRXsJMx1eeWD0Iqkl2oz6KF6zng3PeIy1IY0ijrsxZTBXtwDkWa6H1mfmZCw==",
                            PhoneNumberConfirmed = false,
                            Role = "SCRIPTMANAGER",
                            SecurityStamp = "9949d906-cbbd-47fe-b2fd-74a10ec78d87",
                            Status = "Active",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mrs",
                            TwoFactorEnabled = false,
                            UserName = "Script Manager Siba"
                        },
                        new
                        {
                            Id = "19510ebd-c911-4c36-826a-20cf5e58ef30",
                            AccessFailedCount = 0,
                            Address = "321 Pharmacy Ln, SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "9df8a6af-c2d2-4694-92ea-f06e0de0a178",
                            ConfirmPassword = "consumable@123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "siba@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Anna",
                            LastName = "Script",
                            LockoutEnabled = false,
                            Password = "consumable@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOABTuKistSO4IcLUIR08k9wS2WQ0YBcv0eiKa0TWyg969AxDtdvoxD5jWQCHFw0zQ==",
                            PhoneNumberConfirmed = false,
                            Role = "CONSUMABLESMANAGER",
                            SecurityStamp = "07fcc089-8b3e-4380-b4fd-b3b2702d959c",
                            Status = "Active",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mrs",
                            TwoFactorEnabled = false,
                            UserName = "Consumable Manager Siba"
                        },
                        new
                        {
                            Id = "aea403dc-8f45-4908-90fe-615ee5677578",
                            AccessFailedCount = 0,
                            Address = "2nd avenue , SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "076083de-5b76-45b0-8713-0aaa2316c9f4",
                            ConfirmPassword = "ward@123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "shafeeq@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Shafeeq",
                            LastName = "Agnew",
                            LockoutEnabled = false,
                            Password = "ward@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWjyzOkWiigcDRk8Iu0PCyY9W9OlhyD64tThB0gShan4dj9coShy4Y9yfri1Ax0MQ==",
                            PhoneNumberConfirmed = false,
                            Role = "WARDADMIN",
                            SecurityStamp = "8d4bbdae-43e7-42bc-b41a-a16c17cfe1b5",
                            Status = "Active",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mr",
                            TwoFactorEnabled = false,
                            UserName = "Shafeeq"
                        },
                        new
                        {
                            Id = "8ea6faa2-3ea7-489a-a41e-a2bce7ca86a5",
                            AccessFailedCount = 0,
                            Address = "4th avenue , SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "1eef44f8-3517-4aa5-9534-7f389d36a73d",
                            ConfirmPassword = "nursesister@123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nursesister@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Princess",
                            LastName = "Phiri",
                            LockoutEnabled = false,
                            Password = "nursesister@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHiGcSST7uacsInhG14uGfiFYNuzM+lY167aQGJoyQb3lA2z4ADqKcrFPgaf8Ah0tA==",
                            PhoneNumberConfirmed = false,
                            Role = "NURSINGSISTER",
                            SecurityStamp = "4a7fcd43-3e3d-4c19-86f5-4784621bbbf2",
                            Status = "Active",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mrs",
                            TwoFactorEnabled = false,
                            UserName = "Nurse Sister Princess"
                        },
                        new
                        {
                            Id = "b3ebbcee-5ada-479f-a9c0-cad49fa55c19",
                            AccessFailedCount = 0,
                            Address = "12th Nelson Mandela Road , SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "a9bf2fb0-100b-4818-b07b-520c87418bf0",
                            ConfirmPassword = "patient@123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Password = "patient@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGedef+sogAP+MkiIlNGedgniFqz5FbtGrYgTTWl04UiThe7Nq64OsvxlD6ZMFY9Ng==",
                            PhoneNumberConfirmed = false,
                            Role = "PATIENT",
                            SecurityStamp = "e6bf8fe1-28ca-45d7-bac2-0be02aa15186",
                            Status = "Active",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mr",
                            TwoFactorEnabled = false,
                            UserName = "Patient"
                        },
                        new
                        {
                            Id = "06c4ff00-6ad1-4fa2-b0b8-38f888f40a93",
                            AccessFailedCount = 0,
                            Address = "12th Nelson Mandela Road , SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "15dd2a56-8667-4c59-98b3-ed61be2ad26d",
                            ConfirmPassword = "Patient@44",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient22@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "James",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Password = "Patient@44",
                            PasswordHash = "AQAAAAIAAYagAAAAEKw9vm6RtO0evWNpJKLFFpIwtRy5nX3YYj/rlvOxaAG4fH2IrzRsK5U00QZKrswD5g==",
                            PhoneNumberConfirmed = false,
                            Role = "PATIENT",
                            SecurityStamp = "d31c208e-f411-4923-8d0f-72fb71acb78b",
                            Status = "Inactive",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mr",
                            TwoFactorEnabled = false,
                            UserName = "Patient 2"
                        },
                        new
                        {
                            Id = "50223db8-df0a-421d-803d-1d879d014b54",
                            AccessFailedCount = 0,
                            Address = "13th Nelson Mandela Road , SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "c6eb0784-88d4-4a97-9ab2-9f8a95b9a16e",
                            ConfirmPassword = "patientLuckpatient123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient33@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lucky",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Password = "Luckpatient@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMNjhbUTaYulcE38wLJrnS2nFxhSINIXzXlUSPrCHll8svgVxERmgx8iH0N9J9ALDQ==",
                            PhoneNumberConfirmed = false,
                            Role = "PATIENT",
                            SecurityStamp = "4f2732c9-30b9-4155-a645-9c048f645ff1",
                            Status = "Inactive",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mrs",
                            TwoFactorEnabled = false,
                            UserName = "Patient 3"
                        },
                        new
                        {
                            Id = "ed43645e-dea7-42dd-896b-ec820ecafc39",
                            AccessFailedCount = 0,
                            Address = "2nd Nelson Mandela Road , SummerStrand",
                            City = "PortElizabeth",
                            ConcurrencyStamp = "d54acef3-ccb1-4f25-9b72-815e01542e4c",
                            ConfirmPassword = "Alfredpatient@123",
                            DateOfBirth = new DateTime(1990, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "patient55@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Alfred",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            Password = "Alfredpatient@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEF24qIf+a7zQ/TeArJRT2geJBky8u6eU1AHS7tEyLoytjjj1agasfCMsY35O7xQ8gQ==",
                            PhoneNumberConfirmed = false,
                            Role = "PATIENT",
                            SecurityStamp = "f86bf184-9175-4c99-90ec-00fa6a62043e",
                            Status = "Inactive",
                            Suburb = "Summerstrand",
                            TermsOfServiceAccepted = true,
                            Title = "Mr",
                            TwoFactorEnabled = false,
                            UserName = "Patient 5"
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedId"));

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeletionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardId")
                        .HasColumnType("int");

                    b.HasKey("BedId");

                    b.HasIndex("WardId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = 1,
                            BedNumber = "101",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 1
                        },
                        new
                        {
                            BedId = 2,
                            BedNumber = "102",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 1
                        },
                        new
                        {
                            BedId = 3,
                            BedNumber = "103",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 1
                        },
                        new
                        {
                            BedId = 4,
                            BedNumber = "104",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 1
                        },
                        new
                        {
                            BedId = 5,
                            BedNumber = "105",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 1
                        },
                        new
                        {
                            BedId = 6,
                            BedNumber = "106",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 1
                        },
                        new
                        {
                            BedId = 7,
                            BedNumber = "201",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 2
                        },
                        new
                        {
                            BedId = 8,
                            BedNumber = "202",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 2
                        },
                        new
                        {
                            BedId = 9,
                            BedNumber = "203",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 2
                        },
                        new
                        {
                            BedId = 10,
                            BedNumber = "204",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 2
                        },
                        new
                        {
                            BedId = 11,
                            BedNumber = "205",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 2
                        },
                        new
                        {
                            BedId = 12,
                            BedNumber = "206",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 2
                        },
                        new
                        {
                            BedId = 13,
                            BedNumber = "301",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 3
                        },
                        new
                        {
                            BedId = 14,
                            BedNumber = "302",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 3
                        },
                        new
                        {
                            BedId = 15,
                            BedNumber = "303",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 3
                        },
                        new
                        {
                            BedId = 16,
                            BedNumber = "304",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 3
                        },
                        new
                        {
                            BedId = 17,
                            BedNumber = "305",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 3
                        },
                        new
                        {
                            BedId = 18,
                            BedNumber = "306",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 3
                        },
                        new
                        {
                            BedId = 19,
                            BedNumber = "401",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 4
                        },
                        new
                        {
                            BedId = 20,
                            BedNumber = "402",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 4
                        },
                        new
                        {
                            BedId = 21,
                            BedNumber = "403",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 4
                        },
                        new
                        {
                            BedId = 22,
                            BedNumber = "404",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 4
                        },
                        new
                        {
                            BedId = 23,
                            BedNumber = "405",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 4
                        },
                        new
                        {
                            BedId = 24,
                            BedNumber = "406",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 4
                        },
                        new
                        {
                            BedId = 25,
                            BedNumber = "501",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 5
                        },
                        new
                        {
                            BedId = 26,
                            BedNumber = "502",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 5
                        },
                        new
                        {
                            BedId = 27,
                            BedNumber = "503",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 5
                        },
                        new
                        {
                            BedId = 28,
                            BedNumber = "504",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 5
                        },
                        new
                        {
                            BedId = 29,
                            BedNumber = "505",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 5
                        },
                        new
                        {
                            BedId = 30,
                            BedNumber = "506",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 5
                        },
                        new
                        {
                            BedId = 31,
                            BedNumber = "601",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 6
                        },
                        new
                        {
                            BedId = 32,
                            BedNumber = "602",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 6
                        },
                        new
                        {
                            BedId = 33,
                            BedNumber = "603",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 6
                        },
                        new
                        {
                            BedId = 34,
                            BedNumber = "604",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 6
                        },
                        new
                        {
                            BedId = 35,
                            BedNumber = "605",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 6
                        },
                        new
                        {
                            BedId = 36,
                            BedNumber = "606",
                            DeletionStatus = "Active",
                            Status = "Available",
                            WardId = 6
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.BedAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BedAssignmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.HasIndex("BedId");

                    b.ToTable("BedAssignments");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<string>("DeletionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ConditionId");

                    b.ToTable("Conditions");

                    b.HasData(
                        new
                        {
                            ConditionId = 1,
                            DeletionStatus = "Active",
                            Description = "A chronic condition that affects how the body processes blood sugar (glucose).",
                            Name = "Diabetes"
                        },
                        new
                        {
                            ConditionId = 2,
                            DeletionStatus = "Active",
                            Description = "A condition in which the blood pressure in the arteries is persistently elevated.",
                            Name = "Hypertension"
                        },
                        new
                        {
                            ConditionId = 3,
                            DeletionStatus = "Active",
                            Description = "A condition in which a person's airways become inflamed, narrow, and swell.",
                            Name = "Asthma"
                        },
                        new
                        {
                            ConditionId = 4,
                            DeletionStatus = "Active",
                            Description = "A long-term condition where the kidneys do not work effectively.",
                            Name = "Chronic Kidney Disease"
                        },
                        new
                        {
                            ConditionId = 5,
                            DeletionStatus = "Active",
                            Description = "A range of conditions that affect the heart.",
                            Name = "Heart Disease"
                        },
                        new
                        {
                            ConditionId = 6,
                            DeletionStatus = "Active",
                            Description = "A medical condition where poor blood flow to the brain results in cell death.",
                            Name = "Stroke"
                        },
                        new
                        {
                            ConditionId = 7,
                            DeletionStatus = "Active",
                            Description = "A group of lung diseases that block airflow and make it difficult to breathe.",
                            Name = "Chronic Obstructive Pulmonary Disease (COPD)"
                        },
                        new
                        {
                            ConditionId = 8,
                            DeletionStatus = "Active",
                            Description = "A progressive disease that destroys memory and other important mental functions.",
                            Name = "Alzheimer's Disease"
                        },
                        new
                        {
                            ConditionId = 9,
                            DeletionStatus = "Active",
                            Description = "A disorder of the central nervous system that affects movement, often including tremors.",
                            Name = "Parkinson's Disease"
                        },
                        new
                        {
                            ConditionId = 10,
                            DeletionStatus = "Active",
                            Description = "A neurological disorder marked by sudden recurrent episodes of sensory disturbance, loss of consciousness, or convulsions.",
                            Name = "Epilepsy"
                        },
                        new
                        {
                            ConditionId = 11,
                            DeletionStatus = "Active",
                            Description = "A disease in which the immune system eats away at the protective covering of nerves.",
                            Name = "Multiple Sclerosis (MS)"
                        },
                        new
                        {
                            ConditionId = 12,
                            DeletionStatus = "Active",
                            Description = "A virus that attacks the immune system, leading to life-threatening infections and cancers.",
                            Name = "HIV/AIDS"
                        },
                        new
                        {
                            ConditionId = 13,
                            DeletionStatus = "Active",
                            Description = "Inflammation of one or more of your joints causing pain and stiffness.",
                            Name = "Arthritis"
                        },
                        new
                        {
                            ConditionId = 14,
                            DeletionStatus = "Active",
                            Description = "A condition in which bones become weak and brittle.",
                            Name = "Osteoporosis"
                        },
                        new
                        {
                            ConditionId = 15,
                            DeletionStatus = "Active",
                            Description = "A disease in which abnormal cells divide uncontrollably and destroy body tissue.",
                            Name = "Cancer"
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Consumable", b =>
                {
                    b.Property<int>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumableId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ConsumableId");

                    b.ToTable("Consumables");

                    b.HasData(
                        new
                        {
                            ConsumableId = 1,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6705),
                            DeletionStatus = "Active",
                            Description = "Sterile bandages for wound care",
                            ExpiryDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6706),
                            Name = "Bandages",
                            Quantity = 100,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 2,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6709),
                            DeletionStatus = "Active",
                            Description = "Disposable syringes for injections",
                            ExpiryDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6710),
                            Name = "Syringes",
                            Quantity = 150,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 3,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6712),
                            DeletionStatus = "Active",
                            Description = "Latex gloves for medical procedures",
                            ExpiryDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6712),
                            Name = "Gloves",
                            Quantity = 200,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 4,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6714),
                            DeletionStatus = "Active",
                            Description = "Film used for X-ray imaging",
                            ExpiryDate = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6714),
                            Name = "X-Ray Film",
                            Quantity = 50,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 5,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6716),
                            DeletionStatus = "Active",
                            Description = "Topical ointment for infections",
                            ExpiryDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6716),
                            Name = "Antibiotic Ointment",
                            Quantity = 75,
                            Type = 0
                        },
                        new
                        {
                            ConsumableId = 6,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6718),
                            DeletionStatus = "Active",
                            Description = "Masks for protection against infection",
                            ExpiryDate = new DateTime(2024, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6718),
                            Name = "Surgical Masks",
                            Quantity = 500,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 7,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6720),
                            DeletionStatus = "Active",
                            Description = "Digital thermometers for temperature measurement",
                            ExpiryDate = new DateTime(2026, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6720),
                            Name = "Thermometers",
                            Quantity = 30,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 8,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6747),
                            DeletionStatus = "Active",
                            Description = "Sterile saline solution for wound cleaning and IV use",
                            ExpiryDate = new DateTime(2025, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6747),
                            Name = "Saline Solution",
                            Quantity = 100,
                            Type = 0
                        },
                        new
                        {
                            ConsumableId = 9,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6749),
                            DeletionStatus = "Active",
                            Description = "Sterile IV sets for intravenous therapy",
                            ExpiryDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6750),
                            Name = "IV Drip Sets",
                            Quantity = 75,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 10,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6751),
                            DeletionStatus = "Active",
                            Description = "Sterile cotton swabs for wound cleaning or diagnostic purposes",
                            ExpiryDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6752),
                            Name = "Sterile Swabs",
                            Quantity = 200,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 11,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6753),
                            DeletionStatus = "Active",
                            Description = "Surgical sutures for wound closure",
                            ExpiryDate = new DateTime(2026, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6754),
                            Name = "Sutures",
                            Quantity = 120,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 12,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6755),
                            DeletionStatus = "Active",
                            Description = "Tubes for blood sample collection",
                            ExpiryDate = new DateTime(2024, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6756),
                            Name = "Blood Collection Tubes",
                            Quantity = 300,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 13,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6757),
                            DeletionStatus = "Active",
                            Description = "Sterile drapes for surgical procedures",
                            ExpiryDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6758),
                            Name = "Sterile Drapes",
                            Quantity = 100,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 14,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6759),
                            DeletionStatus = "Active",
                            Description = "Disposable scalpel blades for surgical procedures",
                            ExpiryDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6760),
                            Name = "Scalpel Blades",
                            Quantity = 80,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 15,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6761),
                            DeletionStatus = "Active",
                            Description = "Sterile wipes for disinfection purposes",
                            ExpiryDate = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6762),
                            Name = "Alcohol Wipes",
                            Quantity = 250,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 16,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6763),
                            DeletionStatus = "Active",
                            Description = "Electrodes used in ECG monitoring",
                            ExpiryDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6764),
                            Name = "ECG Electrodes",
                            Quantity = 150,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 17,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6765),
                            DeletionStatus = "Active",
                            Description = "Sterile catheters for medical procedures",
                            ExpiryDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6766),
                            Name = "Catheters",
                            Quantity = 100,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 18,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6767),
                            DeletionStatus = "Active",
                            Description = "Cuffs used in blood pressure monitoring",
                            ExpiryDate = new DateTime(2026, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6768),
                            Name = "Blood Pressure Cuffs",
                            Quantity = 60,
                            Type = 2
                        },
                        new
                        {
                            ConsumableId = 19,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6769),
                            DeletionStatus = "Active",
                            Description = "Sterile cannulas for intravenous therapy",
                            ExpiryDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6770),
                            Name = "IV Cannulas",
                            Quantity = 150,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 20,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6771),
                            DeletionStatus = "Active",
                            Description = "Gel used to reduce friction during procedures",
                            ExpiryDate = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6772),
                            Name = "Lubricating Gel",
                            Quantity = 100,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 21,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6773),
                            DeletionStatus = "Active",
                            Description = "Sterile gauze pads for wound dressing",
                            ExpiryDate = new DateTime(2025, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6774),
                            Name = "Gauze Pads",
                            Quantity = 400,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 22,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6775),
                            DeletionStatus = "Active",
                            Description = "Pouches for sterilizing surgical instruments",
                            ExpiryDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6776),
                            Name = "Sterilization Pouches",
                            Quantity = 250,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 23,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6783),
                            DeletionStatus = "Active",
                            Description = "Masks for administering oxygen to patients",
                            ExpiryDate = new DateTime(2025, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6783),
                            Name = "Oxygen Masks",
                            Quantity = 70,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 24,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6785),
                            DeletionStatus = "Active",
                            Description = "Strips used for non-invasive wound closure",
                            ExpiryDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6785),
                            Name = "Wound Closure Strips",
                            Quantity = 150,
                            Type = 1
                        },
                        new
                        {
                            ConsumableId = 25,
                            CreatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6787),
                            DeletionStatus = "Active",
                            Description = "Inhalers for asthma and respiratory conditions",
                            ExpiryDate = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedDate = new DateTime(2024, 10, 21, 12, 22, 13, 763, DateTimeKind.Local).AddTicks(6787),
                            Name = "Inhalers",
                            Quantity = 60,
                            Type = 0
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Discharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.ToTable("Discharges");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.DoctorAdviceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NurseId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestDetails")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorAdviceRequests");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.HospitalInfo", b =>
                {
                    b.Property<int>("HospitalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalInfoId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("HospitalInfoId");

                    b.ToTable("HospitalInfos");

                    b.HasData(
                        new
                        {
                            HospitalInfoId = 1,
                            Address = "123 Health St, Wellness City, HC 45678",
                            Email = "contact@timelesstechmed.com",
                            HospitalName = "Timeless Technicians Medical Center",
                            PhoneNumber = "+1-234-567-8901",
                            WebsiteUrl = "https://www.timelesstechmed.com"
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Login", b =>
                {
                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<string>("UserNameorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<string>("DeletionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationId");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            MedicationId = 1,
                            DeletionStatus = "Active",
                            Description = "Pain reliever and anti-inflammatory",
                            ExpiryDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aspirin",
                            Quantity = 100,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 2,
                            DeletionStatus = "Active",
                            Description = "Anti-inflammatory and pain relief",
                            ExpiryDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ibuprofen",
                            Quantity = 200,
                            Schedule = "Schedule4",
                            Type = "OverTheCounter"
                        },
                        new
                        {
                            MedicationId = 3,
                            DeletionStatus = "Active",
                            Description = "Supports bone health",
                            ExpiryDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vitamin D",
                            Quantity = 150,
                            Schedule = "Schedule3",
                            Type = "Supplement"
                        },
                        new
                        {
                            MedicationId = 4,
                            DeletionStatus = "Active",
                            Description = "Used to manage type 2 diabetes",
                            ExpiryDate = new DateTime(2025, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Metformin",
                            Quantity = 50,
                            Schedule = "Schedule2",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 5,
                            DeletionStatus = "Active",
                            Description = "Antihistamine for allergy relief",
                            ExpiryDate = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cetirizine",
                            Quantity = 80,
                            Schedule = "Schedule7",
                            Type = "OverTheCounter"
                        },
                        new
                        {
                            MedicationId = 6,
                            DeletionStatus = "Active",
                            Description = "Supports bone health",
                            ExpiryDate = new DateTime(2025, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Calcium Supplement",
                            Quantity = 60,
                            Schedule = "Schedule5",
                            Type = "Supplement"
                        },
                        new
                        {
                            MedicationId = 7,
                            DeletionStatus = "Active",
                            Description = "Antibiotic used to treat bacterial infections",
                            ExpiryDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amoxicillin",
                            Quantity = 100,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 8,
                            DeletionStatus = "Active",
                            Description = "Pain reliever and fever reducer",
                            ExpiryDate = new DateTime(2024, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Paracetamol",
                            Quantity = 300,
                            Schedule = "Schedule6",
                            Type = "OverTheCounter"
                        },
                        new
                        {
                            MedicationId = 9,
                            DeletionStatus = "Active",
                            Description = "Antihistamine for allergy symptoms",
                            ExpiryDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Loratadine",
                            Quantity = 120,
                            Schedule = "Schedule7",
                            Type = "OverTheCounter"
                        },
                        new
                        {
                            MedicationId = 10,
                            DeletionStatus = "Active",
                            Description = "Hormone used to control blood sugar in diabetes",
                            ExpiryDate = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Insulin",
                            Quantity = 50,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 11,
                            DeletionStatus = "Active",
                            Description = "Used to treat acid reflux and heartburn",
                            ExpiryDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Omeprazole",
                            Quantity = 80,
                            Schedule = "Schedule2",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 12,
                            DeletionStatus = "Active",
                            Description = "Used for temporary relief of cough",
                            ExpiryDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cough Syrup",
                            Quantity = 60,
                            Schedule = "Schedule6",
                            Type = "OverTheCounter"
                        },
                        new
                        {
                            MedicationId = 13,
                            DeletionStatus = "Active",
                            Description = "Supports cell production and prevents certain birth defects",
                            ExpiryDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Folic Acid",
                            Quantity = 90,
                            Schedule = "Schedule5",
                            Type = "Supplement"
                        },
                        new
                        {
                            MedicationId = 14,
                            DeletionStatus = "Active",
                            Description = "Steroid used to treat inflammation",
                            ExpiryDate = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Prednisone",
                            Quantity = 40,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 15,
                            DeletionStatus = "Active",
                            Description = "Anticoagulant used to prevent blood clots",
                            ExpiryDate = new DateTime(2025, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Warfarin",
                            Quantity = 70,
                            Schedule = "Schedule3",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 16,
                            DeletionStatus = "Active",
                            Description = "Used to lower cholesterol",
                            ExpiryDate = new DateTime(2025, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Simvastatin",
                            Quantity = 60,
                            Schedule = "Schedule2",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 17,
                            DeletionStatus = "Active",
                            Description = "Used to prevent strokes and heart attacks",
                            ExpiryDate = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Clopidogrel",
                            Quantity = 50,
                            Schedule = "Schedule2",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 18,
                            DeletionStatus = "Active",
                            Description = "Diuretic used to treat high blood pressure",
                            ExpiryDate = new DateTime(2025, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hydrochlorothiazide",
                            Quantity = 80,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 19,
                            DeletionStatus = "Active",
                            Description = "Hormone replacement for thyroid conditions",
                            ExpiryDate = new DateTime(2025, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Levothyroxine",
                            Quantity = 60,
                            Schedule = "Schedule2",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 20,
                            DeletionStatus = "Active",
                            Description = "Calcium channel blocker used to treat high blood pressure",
                            ExpiryDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Amlodipine",
                            Quantity = 70,
                            Schedule = "Schedule2",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 21,
                            DeletionStatus = "Active",
                            Description = "Relieves indigestion and heartburn",
                            ExpiryDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Antacids",
                            Quantity = 150,
                            Schedule = "Schedule6",
                            Type = "OverTheCounter"
                        },
                        new
                        {
                            MedicationId = 22,
                            DeletionStatus = "Active",
                            Description = "Antibiotic used to treat infections",
                            ExpiryDate = new DateTime(2025, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ciprofloxacin",
                            Quantity = 50,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 23,
                            DeletionStatus = "Active",
                            Description = "ACE inhibitor used to treat high blood pressure",
                            ExpiryDate = new DateTime(2025, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lisinopril",
                            Quantity = 80,
                            Schedule = "Schedule1",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 24,
                            DeletionStatus = "Active",
                            Description = "Non-narcotic cough suppressant",
                            ExpiryDate = new DateTime(2025, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Benzonatate",
                            Quantity = 90,
                            Schedule = "Schedule4",
                            Type = "Prescription"
                        },
                        new
                        {
                            MedicationId = 25,
                            DeletionStatus = "Active",
                            Description = "Supports general health and wellness",
                            ExpiryDate = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Multivitamins",
                            Quantity = 200,
                            Schedule = "Schedule5",
                            Type = "Supplement"
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.MedicationPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministeredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePrescribed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.HasIndex("MedicationId");

                    b.ToTable("MedicationPrescriptions");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.NonScheduledMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministeredBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdministeredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("NonScheduledMedications");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.HasIndex("AllergyId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergies");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientAppointments");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdministered")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientConditions");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientDischarge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministeredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DischargeReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.ToTable("PatientDischargeInstructions");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.ToTable("PatientFolders");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientInstruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministeredBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InstructionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.ToTable("PatientInstructions");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdministered")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MovementStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.ToTable("PatientMovements");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientTreatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatePerformed")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TreatmentDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TreatmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientTreatments");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientVisitSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.ToTable("PatientVisitSchedules");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientVital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministeredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientVitalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Active");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SugarLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientVitals");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateWritten")
                        .HasColumnType("datetime2");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.ReAdmissionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitPatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReAdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitPatientId");

                    b.ToTable("ReAdmissionHistories");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.ScheduledMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdministeredBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AdministeredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("ScheduledMedicationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.ToTable("ScheduledMedications");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.StockLog", b =>
                {
                    b.Property<int>("StockLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockLogId"));

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityTaken")
                        .HasColumnType("int");

                    b.HasKey("StockLogId");

                    b.HasIndex("ConsumableId");

                    b.ToTable("StockLogs");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.StockRequest", b =>
                {
                    b.Property<int>("StockRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockRequestId"));

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestedQuantity")
                        .HasColumnType("int");

                    b.HasKey("StockRequestId");

                    b.HasIndex("ConsumableId");

                    b.ToTable("StockRequests");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Ward", b =>
                {
                    b.Property<int>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WardStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardId");

                    b.ToTable("Wards");

                    b.HasData(
                        new
                        {
                            WardId = 1,
                            Capacity = 20,
                            Description = "For patients with a range of medical conditions not requiring specialized care.",
                            WardName = "General Medical Ward",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 2,
                            Capacity = 15,
                            Description = "Ward for surgical patients.",
                            WardName = "Surgical",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 3,
                            Capacity = 10,
                            Description = "Ward for pediatric patients.",
                            WardName = "Pediatrics",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 4,
                            Capacity = 12,
                            Description = "Ward for orthopedic patients.",
                            WardName = "Orthopedics",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 5,
                            Capacity = 8,
                            Description = "Ward for neurological conditions.",
                            WardName = "Neurology",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 6,
                            Capacity = 10,
                            Description = "Ward for cancer patients.",
                            WardName = "Oncology",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 7,
                            Capacity = 10,
                            Description = "For critically ill patients requiring constant monitoring and intensive care.",
                            WardName = "Intensive Care Unit (ICU)",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 8,
                            Capacity = 10,
                            Description = "For acute cases requiring immediate attention.",
                            WardName = "Emergency Ward",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 9,
                            Capacity = 12,
                            Description = "Ward for pregnant women and childbirth.",
                            WardName = "Maternity",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 10,
                            Capacity = 15,
                            Description = "Ward specializing in heart-related conditions.",
                            WardName = "Cardiology",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 11,
                            Capacity = 6,
                            Description = "Specialized unit for burn patients.",
                            WardName = "Burn Unit",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 12,
                            Capacity = 8,
                            Description = "Ward focused on elderly patients.",
                            WardName = "Geriatrics",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 13,
                            Capacity = 20,
                            Description = "Ward for mental health conditions.",
                            WardName = "Psychiatric",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 14,
                            Capacity = 15,
                            Description = "For patients recovering from surgeries or trauma.",
                            WardName = "Rehabilitation",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 15,
                            Capacity = 8,
                            Description = "Ward for premature or critically ill newborns.",
                            WardName = "Neonatal Intensive Care Unit (NICU)",
                            WardStatus = "Active"
                        },
                        new
                        {
                            WardId = 16,
                            Capacity = 10,
                            Description = "Ward for patients requiring kidney dialysis.",
                            WardName = "Dialysis",
                            WardStatus = "Active"
                        });
                });

            modelBuilder.Entity("TimelessTechnicians.UI.ViewModel.ChangeEmailViewModel", b =>
                {
                    b.Property<string>("ConfirmNewEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ChangeEmailViewModel");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.ViewModel.ChangePasswordViewModel", b =>
                {
                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("ChangePasswordViewModel");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.ViewModel.UserListViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserListViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.AdmitPatient", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Bed", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.BedAssignment", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmitPatient");

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Discharge", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.DoctorAdviceRequest", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.MedicationPrescription", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.NonScheduledMedication", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientAllergy", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany("PatientAllergies")
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmitPatient");

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientAppointment", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmitPatient");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientCondition", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany("PatientConditions")
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmitPatient");

                    b.Navigation("Condition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientDischarge", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientFolder", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientInstruction", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientMedication", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany("PatientMedications")
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdmitPatient");

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientMovement", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientTreatment", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientVisitSchedule", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany()
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.PatientVital", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Prescription", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimelessTechnicians.UI.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.ReAdmissionHistory", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.AdmitPatient", "AdmitPatient")
                        .WithMany("ReAdmissionHistories")
                        .HasForeignKey("AdmitPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmitPatient");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.ScheduledMedication", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.StockLog", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.StockRequest", b =>
                {
                    b.HasOne("TimelessTechnicians.UI.Models.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.AdmitPatient", b =>
                {
                    b.Navigation("PatientAllergies");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientMedications");

                    b.Navigation("ReAdmissionHistories");
                });

            modelBuilder.Entity("TimelessTechnicians.UI.Models.Ward", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
